alias gp='git pull'
alias gpr='git pull --recurse-submodules'
alias gP='git push --recurse-submodules=check'
alias gS='git diff --name-status --cached'
alias gc='git commit -m'
alias db=dotbare
alias ...='../..'
alias untar='tar -zxvf'
alias groot='git rev-parse --show-toplevel'

export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export BROWSER=firefox.exe
export XDG_DATA_HOME="$HOME/.local/share"
export MANPATH="/usr/local/man:$MANPATH"
export DISPLAY=localhost:0.0

export KEYTIMEOUT=1
export HISTSIZE=25000
export SAVEHIST=5000
export NNN_FIFO=/tmp/nnn.fifo nnn
export NNN_PLUG='p:preview-tui'

# disable scroll lock through ctrl-s
# stty -ixon

# eval "$(thefuck --alias)"

[ -f ~/.fzfrc ] && source ~/.fzfrc

# show when running in a shell spawned by ranger
if [ -n "$RANGER_LEVEL" ]; then export PS1="[r]$PS1"; fi

# cd override that moves to a file's dir when a file path is passed
cd() {
  if [ -f "${@: -1}" ]; then
    builtin cd ${@:2:$# -1} "$(dirname "${@: -1}")"
  else
    builtin cd $@
  fi
}

# mount Windows drive into WSL
dmnt() {
  if [ -z "$1" ]; then
    echo "Usage: $0 DRIVE_LETTER_LOWER_CASE"
    return 1
  fi

  sudo mkdir -p /mnt/$1
  echo mount -t drvfs ${1:u}: /mnt/$1
  sudo mount -t drvfs ${1:u}: /mnt/$1
}

# open Windows Explorer in working dir
exp() { explorer.exe "$(wslpath -w "$PWD")" }

# list files on one branch but not on another
new-files() {
  if [ -z "$2" ]; then
    echo "Usage: $0 SOURCE_BRANCH TARGET_BRANCH"
    return 1
  fi

  git diff-tree -r --diff-filter=D $1 $2
}

# update everything
up() {
  sudo apt update
  sudo apt upgrade -y
  sudo apt autoremove -y
  sudo apt autoclean
  zinit update --all --parallel --no-pager
  vim -i NONE -c "PlugUpdate" -c "qa"
  $HOME/.tmux/plugins/tpm/bin/update_plugins all
  tmux source $HOME/.tmux.conf
}

# Move to dir where ranger exited
ra() {
  ranger $@ --choosedir=$XDG_DATA_HOME/ranger/dir
  builtin cd "$(cat $XDG_DATA_HOME/ranger/dir)"
}

# look up options in manual
oman() {
  if [ -z "$2" ]; then
    echo "Usage: $0 MANPAGE OPTION"
    echo "Example: $0 git-add -u"
    return 1
  fi

  man -P less\ -p\ \""  ${2}"\" ${1}
}

# find and replace recursively in files
fr() {
  if [ -z "$3" ]; then
    echo "Usage: $0 PATTERN SUBSTITUTE FILENAMES"
    return 1
  fi

  find . -type f -name "$3" -print0 | xargs -0 sed -i '' -e "s/$1/$2/g"
}

# warp url: open bookmarked url in browser
wu() {
  if [ -z "$1" ]; then
    echo "Usage: $0 BOOKMARK"
    return 1
  fi

  local file="$HOME/urls"
  if [ $# -gt 0 ]; then
    $BROWSER $(sed -n "/^$1 /s/^$1 //p" "$file")
    return
  fi
  cat "$file"
}

##################### Dirs ###########################
for i in {1..9}
do
  alias $i="builtin cd -$i > /dev/null"
done

# print latest working dirs
d() {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
}

# make dir and change to it
mcd() { mkdir -p "$1" && cd -P "$1" }

# change to Windows path
wcd() { cd "$(wslpath $1)" }

n() {
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The command builtin allows one to alias nnn to n, if desired, without
    # making an infinitely recursive alias
    command nnn "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f -- "$NNN_TMPFILE" > /dev/null
    }
}
