alias gp='git pull --recurse-submodules'
alias gP='git push --recurse-submodules=check'
alias gs='git status'
alias gc='git commit -m'
alias db='dotbare'
alias gn='geeknote'
alias -g ...='../..'
alias x-www-browser='firefox.exe'
alias gnome-www-browser='firefox.exe'
alias untar='tar -zxvf'
alias exp='explorer.exe "$(wslpath -w "$PWD")"'
alias groot='git rev-parse --show-toplevel'

export VISUAL=vim
export EDITOR="$VISUAL"
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH="/usr/local/texlive/2021/bin/x86_64-linux:$PATH"
export MANPATH="/usr/local/man:$MANPATH"
export MANPATH="/usr/local/texlive/2021/texmf-dist/doc/man:$MANPATH"
export INFOPATH="/usr/local/texlive/2021/texmf-dist/doc/info:$INFOPATH"
export DISPLAY=localhost:0.0
export FZF_DEFAULT_OPTS="
--cycle
--preview-window=border-none
--bind='alt-q:cancel,alt-a:select-all,alt-x:deselect-all,alt-m:replace-query'
--bind='alt-t:toggle-preview,alt-n:jump,alt-v:execute(less -f {})'"

KEYTIMEOUT=1
HISTSIZE=25000
SAVEHIST=5000
preview='highlight --force -O ansi {}'

# disable scroll lock through ctrl-s
# stty -ixon

# Show when running in a shell spawned by ranger
if [ -n "$RANGER_LEVEL" ]; then export PS1="[r]$PS1"; fi

eval "$(fasd --init posix-hook)"

up() {
  sudo apt-get update
  sudo apt-get upgrade -y
  sudo apt autoremove
  zinit update --all
  vim -c "PlugUpdate | qa!"
}

# Make dir and change to it
mcd() {
  mkdir -p "$1" && cd -P "$1"
}

# Cd via windows path
wcd() {
  cd "$(wslpath $1)"
}

# Move to dir where ranger exited
ra() {
  ranger --choosedir=$HOME/.local/share/ranger/dir
  cd "$(cat $HOME/.local/share/ranger/dir)"
}

# Show grep results
ff() {
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for"
    return 1
  fi
  hi="$preview 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
  file=$(rg --files-with-matches --no-messages "$1" | fzf --select-1 --preview=$hi --preview-window=$(fzf_smart_preview_pos))
  [[ -n "$file" ]] && vim -c "call search('\v$1', 'c')" "$file"
}

######################## Tmux ########################
# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1")
    return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) && tmux $change -t "$session" || echo "No sessions found"
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# add file to gitignore
agi() {
  echo "$(git ls-tree HEAD --name-only --full-name $@ | fzf --multi)" \
  >> "$(git rev-parse --show-toplevel)/.gitignore"
}

######################## Fasd ########################
# open best matched file using `fasd` if given argument,
# filter output of `fasd` using `fzf` else
v() {
  if [ $# -gt 0 ]; then
    fasd -f -e ${EDITOR:-vim} "$*"
    return $?
  fi

  local out="$(fasd -Rfl | fzf --preview $preview --no-sort --multi \
    --expect=alt-d,enter --preview-window=$(fzf_smart_preview_pos))"
  local key=$(head -1 <<< "$out")
  local selection=$(tail +2 <<< "$out")
  local files=()

  while IFS= read -r file
  do
    files+=("$file")
  done <<< "$selection"

  case "$key" in
    alt-d)
      cd "$(dirname "${files[-1]}")"
      ;;
    enter)
      ${EDITOR:-vim} "${files[@]}"
      ;;
  esac
}

# open best matched dir using `fasd` if given argument,
# filter output of `fasd` using `fzf` else
z() {
  local dir
  if [ $# -gt 0 ]; then
    dir=$(fasd -de 'printf %s' $*)
  else
    dir="$(fasd -Rdl "$1" | fzf --no-sort)"
  fi
  cd "${dir}"
}

# cd into directory of file chosen via fasd
vz() {
  local file
  if [ $# -gt 0 ]; then
    file=$(fasd -f "$*")
  else
    file="$(fasd -Rfl "$1" | fzf --no-sort)"
  fi
  cd "$(dirname "$file")"
}

##################### Dirs ###########################
for i in {1..9}
do
  alias $i="cd -$i"
done

d() {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
}

# output the best fzf preview window position depending on current
# tmux pane dimensions
fzf_smart_preview_pos() {
  local  width=$(tmux display-message -p '#{pane_width}')
  local height=$(tmux display-message -p '#{pane_height}')

  # landscape mode if width > 2 * height
  [ $width -gt $((2 * $height)) ] && echo right || echo up
}

