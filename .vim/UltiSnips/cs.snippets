snippet [s "Serializable" b
[Serializable
endsnippet

snippet <pr
<paramref name="$0"/>
endsnippet

snippet <t
<typeparam name="${1}">${2:$1}</typeparam>
endsnippet

snippet <tr
<typeparamref name="$0"/>
endsnippet

snippet <l
<list type="${3:number}">
    <listheader>
        <term>$1</term>
        <description>$2</description>
    </listheader>
    $0
</list>
endsnippet

snippet <i
<item>
    <term>$1</term>
    <description>$2</description>
</item>
endsnippet

snippet <a
<author>$0</author>
endsnippet

snippet <in
<inheritdoc cref="$0"/>
endsnippet

snippet | "String divider"
" + " | " + "
endsnippet

# Unity ----------------------------------------------------------------------
snippet mono "Unity MonoBehaviour" b
using UnityEngine;

public class `!p snip.rv = snip.basename` : MonoBehaviour
{
    $0
}
endsnippet

snippet awake "Awake()" b
private void Awake()
{
    $0
}
endsnippet

snippet onval "OnValidate()" b
private void OnValidate()
{
    $0
}
endsnippet

snippet start "Start()" b
private void Start()
{
    $0
}
endsnippet

snippet update "Update()" b
private void Update()
{
    $0
}
endsnippet

snippet ongui "OnGUI()" b
private void OnGUI()
{
    if (GUILayout.Button("$1"))
    {
        $0
    }
}
endsnippet

snippet [r "Require Component" b
[RequireComponent(typeof($0))
endsnippet

snippet [e "Execute Always" b
[ExecuteAlways
endsnippet

snippet [t "Tooltip" b
[Tooltip("$0")
endsnippet

snippet [h "Header" b
[Header("$0")
endsnippet

snippet <c "Debug.Log color tag"
<color=$1>$0</color>
endsnippet

snippet ddl "Debug.Log as quick marker"
Debug.Log("<color=red>I'M HERE$0</color>");
endsnippet

snippet #ifu "Unity Editor preprocessor" b
#if UNITY_EDITOR
$0#endif
endsnippet

snippet editor "Custom Editor" b
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof($1))]
public class $1Editor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();
        var trg = ($1)target;

        var r = EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("Button"))
            trg.$0
        EditorGUILayout.EndHorizontal();
    }
}
endsnippet
